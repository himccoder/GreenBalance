# ==============================================================================
# HAProxy Configuration for Green CDN with Dynamic Weight Management
# ==============================================================================

# GLOBAL SECTION - Server-wide settings that apply to all HAProxy processes
global
  # ADMIN SOCKET - This allows external programs (like our Python script) to
  # send commands to HAProxy for dynamic configuration changes
  # We can update server weights, enable/disable servers, etc. without restart
  stats socket /var/run/admin.sock mode 666 level admin
  
  # API SOCKET - This exposes HAProxy statistics and allows read-only access
  # Used by monitoring tools and dashboards to get real-time stats
  stats socket /var/run/api.sock mode 666 level admin expose-fd listeners
  
  # LOGGING - Send log messages to stdout so we can see them in Docker logs
  # 'local0 info' means log level INFO and above
  log stdout format raw local0 info
  
  # Optional TCP socket for remote admin (used by the Green Controller in dev)
  #stats socket ipv4@0.0.0.0:9999 level admin

# DEFAULT SECTION - Settings that apply to all frontend/backend sections
# (unless overridden in specific sections)
defaults
  # MODE - We're handling HTTP traffic (not TCP or other protocols)
  mode http
  
  # TIMEOUTS - How long to wait for different types of connections
  timeout client 10s        # How long to wait for client to send request
  timeout connect 5s        # How long to wait to connect to backend server
  timeout server 10s        # How long to wait for server response
  timeout http-request 10s  # How long to wait for complete HTTP request
  
  # Use the global logging configuration
  log global

# STATS DASHBOARD - Web interface to monitor HAProxy performance
listen stats
  # Listen on all interfaces (*) on port 8404
  bind *:8404
  mode http
  
  # Enable the built-in statistics webpage
  stats enable
  stats uri /               # Stats available at root path "/"
  stats refresh 10s         # Auto-refresh page every 10 seconds

# FRONTEND - The "front door" where clients connect
# This is what receives incoming requests from users
frontend myfrontend
  # Listen on port 80 (standard HTTP port)
  bind :80
  
  # Send ALL requests to our backend server pool called "webservers"
  default_backend webservers

# BACKEND - The pool of servers that actually handle requests
# This is where the load balancing magic happens
backend webservers
  # SERVER DEFINITIONS - Each line defines one backend server
  # Format: server <name> <address:port> <options>
  
  # WEB1 - Represents a "US West Coast" server (high renewable energy)
  server s1 web1:80 check weight 256
  # ↑ name=s1, address=web1:80, health check enabled, weight=5 (50% traffic)
  
  # WEB2 - Represents a "US Central" server (moderate renewable energy)  
  server s2 web2:80 check weight 256
  # ↑ name=s2, address=web2:80, health check enabled, weight=3 (30% traffic)
  
  # WEB3 - Represents a "US East Coast" server (lower renewable energy)
  server s3 web3:80 check weight 256
  # ↑ name=s3, address=web3:80, health check enabled, weight=2 (20% traffic)
  
  # WEIGHT EXPLANATION:
  # Total weight = 5 + 3 + 2 = 10
  # s1 gets 5/10 = 50% of traffic
  # s2 gets 3/10 = 30% of traffic  
  # s3 gets 2/10 = 20% of traffic
  #
  # Our Python script will dynamically change these weights based on:
  # - Real-time carbon intensity data
  # - Server performance metrics
  # - Renewable energy availability
