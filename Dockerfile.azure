# Simplified Azure deployment for Green CDN Demo
FROM python:3.11-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*

# Install Python dependencies
RUN pip install flask requests python-dotenv pandas plotly scikit-learn numpy

# Create the demo application
RUN echo 'from flask import Flask, render_template_string, jsonify\n\
import random\n\
import time\n\
from datetime import datetime\n\
\n\
app = Flask(__name__)\n\
\n\
# Simulated carbon intensity data\n\
def get_carbon_data():\n\
    return {\n\
        "california": random.randint(200, 400),\n\
        "texas": random.randint(400, 600),\n\
        "midatlantic": random.randint(500, 700)\n\
    }\n\
\n\
def calculate_weights(carbon_data):\n\
    # Lower carbon = higher weight\n\
    max_carbon = max(carbon_data.values())\n\
    weights = {}\n\
    for region, carbon in carbon_data.items():\n\
        weights[region] = int(256 * (max_carbon - carbon + 100) / (max_carbon + 100))\n\
    return weights\n\
\n\
@app.route("/")\n\
def dashboard():\n\
    carbon_data = get_carbon_data()\n\
    weights = calculate_weights(carbon_data)\n\
    \n\
    return render_template_string("""\n\
<!DOCTYPE html>\n\
<html>\n\
<head>\n\
    <title>üå± Green CDN - Carbon-Aware Load Balancing Demo</title>\n\
    <meta charset="UTF-8">\n\
    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n\
    <style>\n\
        body {\n\
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;\n\
            margin: 0;\n\
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n\
            min-height: 100vh;\n\
            color: white;\n\
        }\n\
        .container {\n\
            max-width: 1200px;\n\
            margin: 0 auto;\n\
            padding: 20px;\n\
        }\n\
        .header {\n\
            text-align: center;\n\
            margin-bottom: 40px;\n\
        }\n\
        .card {\n\
            background: rgba(255,255,255,0.1);\n\
            backdrop-filter: blur(10px);\n\
            padding: 25px;\n\
            margin: 20px 0;\n\
            border-radius: 15px;\n\
            border: 1px solid rgba(255,255,255,0.2);\n\
        }\n\
        .grid {\n\
            display: grid;\n\
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n\
            gap: 20px;\n\
        }\n\
        .region {\n\
            text-align: center;\n\
            padding: 20px;\n\
        }\n\
        .carbon-value {\n\
            font-size: 2.5em;\n\
            font-weight: bold;\n\
            margin: 10px 0;\n\
        }\n\
        .weight-bar {\n\
            background: rgba(255,255,255,0.2);\n\
            height: 20px;\n\
            border-radius: 10px;\n\
            overflow: hidden;\n\
            margin: 15px 0;\n\
        }\n\
        .weight-fill {\n\
            height: 100%;\n\
            background: linear-gradient(90deg, #4CAF50, #8BC34A);\n\
            transition: width 0.5s ease;\n\
        }\n\
        .button {\n\
            background: #4CAF50;\n\
            color: white;\n\
            padding: 12px 24px;\n\
            border: none;\n\
            border-radius: 8px;\n\
            cursor: pointer;\n\
            text-decoration: none;\n\
            display: inline-block;\n\
            margin: 10px;\n\
            transition: background 0.3s;\n\
        }\n\
        .button:hover {\n\
            background: #45a049;\n\
        }\n\
        .low-carbon { color: #4CAF50; }\n\
        .medium-carbon { color: #FF9800; }\n\
        .high-carbon { color: #F44336; }\n\
    </style>\n\
    <script>\n\
        function refreshData() {\n\
            location.reload();\n\
        }\n\
        \n\
        // Auto-refresh every 30 seconds\n\
        setInterval(refreshData, 30000);\n\
    </script>\n\
</head>\n\
<body>\n\
    <div class="container">\n\
        <div class="header">\n\
            <h1>üå± Green CDN Demo</h1>\n\
            <p>Carbon-Aware Load Balancing System</p>\n\
            <p><small>Updated: {{ timestamp }}</small></p>\n\
        </div>\n\
        \n\
        <div class="card">\n\
            <h2>üåç Regional Carbon Intensity</h2>\n\
            <div class="grid">\n\
                {% for region, carbon in carbon_data.items() %}\n\
                <div class="region card">\n\
                    <h3>{{ region.title() }}</h3>\n\
                    <div class="carbon-value {% if carbon < 350 %}low-carbon{% elif carbon < 550 %}medium-carbon{% else %}high-carbon{% endif %}">\n\
                        {{ carbon }}\n\
                    </div>\n\
                    <p>g CO‚ÇÇ/kWh</p>\n\
                    <div class="weight-bar">\n\
                        <div class="weight-fill" style="width: {{ (weights[region] / 256 * 100)|round }}%"></div>\n\
                    </div>\n\
                    <p><strong>Weight: {{ weights[region] }}/256</strong></p>\n\
                    <p>Traffic: {{ (weights[region] / 256 * 100)|round }}%</p>\n\
                </div>\n\
                {% endfor %}\n\
            </div>\n\
        </div>\n\
        \n\
        <div class="card">\n\
            <h2>üéõÔ∏è How It Works</h2>\n\
            <p><strong>Carbon-Aware Routing:</strong> Lower carbon intensity = Higher weight = More traffic</p>\n\
            <ul>\n\
                <li>üü¢ <strong>Green regions</strong> (low carbon) get more traffic</li>\n\
                <li>üü° <strong>Yellow regions</strong> (medium carbon) get moderate traffic</li>\n\
                <li>üî¥ <strong>Red regions</strong> (high carbon) get less traffic</li>\n\
            </ul>\n\
        </div>\n\
        \n\
        <div class="card">\n\
            <h2>üîÑ Actions</h2>\n\
            <button class="button" onclick="refreshData()">üîÑ Refresh Data</button>\n\
            <a href="/api/carbon" class="button">üìä View JSON API</a>\n\
            <a href="/api/weights" class="button">‚öñÔ∏è View Weights API</a>\n\
        </div>\n\
        \n\
        <div class="card">\n\
            <h2>üìà Features</h2>\n\
            <p>This demo shows a simplified version of the Green CDN system:</p>\n\
            <ul>\n\
                <li>Real-time carbon intensity simulation</li>\n\
                <li>Dynamic weight calculation</li>\n\
                <li>Visual traffic distribution</li>\n\
                <li>Auto-refresh every 30 seconds</li>\n\
            </ul>\n\
        </div>\n\
    </div>\n\
</body>\n\
</html>\n\
    """, carbon_data=carbon_data, weights=weights, timestamp=datetime.now().strftime("%Y-%m-%d %H:%M:%S"))\n\
\n\
@app.route("/api/carbon")\n\
def api_carbon():\n\
    return jsonify(get_carbon_data())\n\
\n\
@app.route("/api/weights")\n\
def api_weights():\n\
    carbon_data = get_carbon_data()\n\
    weights = calculate_weights(carbon_data)\n\
    return jsonify(weights)\n\
\n\
if __name__ == "__main__":\n\
    app.run(host="0.0.0.0", port=5000, debug=False)\n\
' > app.py

# Expose port
EXPOSE 5000

# Run the application
CMD ["python", "app.py"]
